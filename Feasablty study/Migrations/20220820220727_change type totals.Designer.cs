// <auto-generated />
using System;
using Feasablty_study.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Feasablty_study.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220820220727_change type totals")]
    partial class changetypetotals
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Feasablty_study.Domin.Entites.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Feasablty_study.Models.Competitors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmounrAdded")
                        .HasColumnType("float");

                    b.Property<string>("CompetitorsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompetitorsPrice")
                        .HasColumnType("float");

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("Products")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("Feasablty_study.Models.Construction_and_buliding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<double>("PricePerMeter")
                        .HasColumnType("float");

                    b.Property<double>("TotalArea")
                        .HasColumnType("float");

                    b.Property<double>("TotalPriceArea")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Construction_and_buliding");
                });

            modelBuilder.Entity("Feasablty_study.Models.Establishment_expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Establishment_expenses");
                });

            modelBuilder.Entity("Feasablty_study.Models.Expected_revenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyQusntity")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalMonthlyPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalYearlyPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Expected_revenue");
                });

            modelBuilder.Entity("Feasablty_study.Models.Feasibility_study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetProfit")
                        .HasColumnType("float");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfitRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProjectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalOperatingExpenseseOneYear")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("WorkingCapital")
                        .HasColumnType("float");

                    b.Property<double>("Zakat")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feasibility_studies");
                });

            modelBuilder.Entity("Feasablty_study.Models.Government_fees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Government_fees");
                });

            modelBuilder.Entity("Feasablty_study.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Licenses")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("License");
                });

            modelBuilder.Entity("Feasablty_study.Models.Machinery_Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Machinery_Equipment");
                });

            modelBuilder.Entity("Feasablty_study.Models.Manpower_workforce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthlySalary")
                        .HasColumnType("float");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<double>("TotalMonthlySalary")
                        .HasColumnType("float");

                    b.Property<double>("TotalYearlySalary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Manpower_workforce");
                });

            modelBuilder.Entity("Feasablty_study.Models.Market_study", b =>
                {
                    b.Property<int>("FeasibilityStudyId")
                        .HasColumnType("int");

                    b.Property<string>("AvailbleOpportunity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketGap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointsOfEwakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectLocationOnTheMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrengthPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetMarket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Threats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalExpected_revenue")
                        .HasColumnType("float");

                    b.Property<double>("TotalMarketing_Activity")
                        .HasColumnType("float");

                    b.HasKey("FeasibilityStudyId");

                    b.ToTable("Market_study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Marketing_Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Marketing_Activity");
                });

            modelBuilder.Entity("Feasablty_study.Models.Preliminary_study", b =>
                {
                    b.Property<int>("FeasibilityStudyId")
                        .HasColumnType("int");

                    b.Property<string>("CteristicsOfTheProjectArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactorsRepresentedOnIncreasedDemand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactorsRepresentedOnLowDemand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageOfTheProject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectObjectives")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisionOfTheProject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeasibilityStudyId");

                    b.ToTable("Preliminary_study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Public_benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Benefit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyCost")
                        .HasColumnType("float");

                    b.Property<double>("YearlyCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Public_benefit");
                });

            modelBuilder.Entity("Feasablty_study.Models.Raw_materials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceOfUnity")
                        .HasColumnType("float");

                    b.Property<int>("QuantityRequiredMonthly")
                        .HasColumnType("int");

                    b.Property<double>("TotalPriceQuantityMonthly")
                        .HasColumnType("float");

                    b.Property<double>("TotalPriceQuantityYearly")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Raw_materials");
                });

            modelBuilder.Entity("Feasablty_study.Models.Rentals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("RentalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RentalYearly")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Feasablty_study.Models.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DangerReductionStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionDangerReduece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionRisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Feasibility_StudyId")
                        .HasColumnType("int");

                    b.Property<string>("TypeRisk")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Feasibility_StudyId");

                    b.ToTable("Risk");
                });

            modelBuilder.Entity("Feasablty_study.Models.Support_Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("Feasablty_study.Models.Technical_Study", b =>
                {
                    b.Property<int>("FeasibilityStudyId")
                        .HasColumnType("int");

                    b.Property<double>("AnnualAaintenance")
                        .HasColumnType("float");

                    b.Property<double>("AnnualDepreciation")
                        .HasColumnType("float");

                    b.Property<int>("OperationalCycle")
                        .HasColumnType("int");

                    b.Property<double>("TotalConstruction_and_buliding")
                        .HasColumnType("float");

                    b.Property<double>("TotalEstablishment_expenses")
                        .HasColumnType("float");

                    b.Property<double>("TotalGovernment_fees")
                        .HasColumnType("float");

                    b.Property<double>("TotalMachinery_Equipment")
                        .HasColumnType("float");

                    b.Property<double>("TotalManpower_workforce")
                        .HasColumnType("float");

                    b.Property<double>("TotalOperatingExpensese")
                        .HasColumnType("float");

                    b.Property<double>("TotalPublic_benefit")
                        .HasColumnType("float");

                    b.Property<double>("TotalRaw_materials")
                        .HasColumnType("float");

                    b.Property<double>("TotalRentals")
                        .HasColumnType("float");

                    b.HasKey("FeasibilityStudyId");

                    b.ToTable("Technical_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Feasablty_study.Models.Competitors", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Competitors")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Construction_and_buliding", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Construction_And_Bulidings")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Establishment_expenses", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Establishment_Expenses")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Expected_revenue", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Expected_Revenues")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Feasibility_study", b =>
                {
                    b.HasOne("Feasablty_study.Models.User", "User")
                        .WithMany("Feasibility_Studies")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Feasablty_study.Models.Government_fees", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Government_Fees")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.License", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Licenses")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Machinery_Equipment", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Machinery_Equipment")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Manpower_workforce", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Manpower_Workforces")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Market_study", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_study")
                        .WithOne("Market_Study")
                        .HasForeignKey("Feasablty_study.Models.Market_study", "FeasibilityStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Marketing_Activity", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Marketing_Activities")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Preliminary_study", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_study")
                        .WithOne("Preliminary_study")
                        .HasForeignKey("Feasablty_study.Models.Preliminary_study", "FeasibilityStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Public_benefit", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Public_Benefits")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Raw_materials", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Raw_Materials")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Rentals", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Rentals")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Risk", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_Study")
                        .WithMany("Risks")
                        .HasForeignKey("Feasibility_StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.Support_Messages", b =>
                {
                    b.HasOne("Feasablty_study.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Feasablty_study.Models.Technical_Study", b =>
                {
                    b.HasOne("Feasablty_study.Models.Feasibility_study", "Feasibility_study")
                        .WithOne("Technical_Study")
                        .HasForeignKey("Feasablty_study.Models.Technical_Study", "FeasibilityStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feasibility_study");
                });

            modelBuilder.Entity("Feasablty_study.Models.User", b =>
                {
                    b.HasOne("Feasablty_study.Domin.Entites.Regions", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Feasablty_study.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Feasablty_study.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Feasablty_study.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Feasablty_study.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Feasablty_study.Domin.Entites.Regions", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Feasablty_study.Models.Feasibility_study", b =>
                {
                    b.Navigation("Competitors");

                    b.Navigation("Construction_And_Bulidings");

                    b.Navigation("Establishment_Expenses");

                    b.Navigation("Expected_Revenues");

                    b.Navigation("Government_Fees");

                    b.Navigation("Licenses");

                    b.Navigation("Machinery_Equipment");

                    b.Navigation("Manpower_Workforces");

                    b.Navigation("Market_Study");

                    b.Navigation("Marketing_Activities");

                    b.Navigation("Preliminary_study");

                    b.Navigation("Public_Benefits");

                    b.Navigation("Raw_Materials");

                    b.Navigation("Rentals");

                    b.Navigation("Risks");

                    b.Navigation("Technical_Study");
                });

            modelBuilder.Entity("Feasablty_study.Models.User", b =>
                {
                    b.Navigation("Feasibility_Studies");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
